#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Writes the current version, build platform etc.
"""

from setuptools.config import read_configuration
import os
import platform
import subprocess
from pathlib import Path
import tomlkit

root = Path(__file__).parent.parent
with open(root/"pyproject.toml") as f:
    metadata = tomlkit.load(f)
with open(root/"version") as f:
    version = f.read().strip()


def createInitFile(dist=None, version=None, sha=None):
    """Create psychopy/__init__.py

    :param:`dist` can be:
        None:
            writes __version__
        'sdist':
            for python setup.py sdist - writes git id (__git_sha__)
        'bdist':
            for python setup.py bdist - writes git id (__git_sha__)
            and __build_platform__
    """
    # get default values if None
    if version is None:
        with open(str(root/'version')) as f:
            version = f.read().strip()
    if sha is None:
        sha = _getGitShaString(dist)
    platformStr = _getPlatformString(dist)

    infoDict = {'version': version,
                'author': "Open Science Tools Ltd",
                'author_email': "support@opensciencetools.org",
                'maintainer_email': "support@opensciencetools.org",
                'url': metadata['project']['urls']['Homepage'],
                'download_url': metadata['project']['urls']['Download'],
                'license': "GPL v3",
                'shaStr': sha,
                'platform': platformStr}

    # write it
    with open(str(root/'psychopy/__init__.py'), 'w') as f:
        outStr = template.format(**infoDict)
        f.write(outStr)
    print('wrote init for ', version, sha)
    # and return it
    return outStr


template = """#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Part of the PsychoPy library
# Copyright (C) 2002-2018 Jonathan Peirce (C) 2019-2024 Open Science Tools Ltd.
# Distributed under the terms of the GNU General Public License (GPL).

# --------------------------------------------------------------------------
# This file is automatically generated during build (do not edit directly).
# --------------------------------------------------------------------------

import os
import sys

__version__ = '{version}'
__license__ = '{license}'
__author__ = '{author}'
__author_email__ = '{author_email}'
__maintainer_email__ = '{maintainer_email}'
__url__ = '{url}'
__download_url__ = '{download_url}'
__git_sha__ = '{shaStr}'
__build_platform__ = '{platform}'

__all__ = ["gui", "misc", "visual", "core",
           "event", "data", "sound", "microphone"]

# for developers the following allows access to the current git sha from
# their repository
if __git_sha__ == 'n/a':
    from subprocess import check_output, PIPE
    # see if we're in a git repo and fetch from there
    try:
        thisFileLoc = os.path.split(__file__)[0]
        output = check_output(['git', 'rev-parse', '--short', 'HEAD'],
                              cwd=thisFileLoc, stderr=PIPE)
    except Exception:
        output = False
    if output:
        __git_sha__ = output.strip()  # remove final linefeed

# update preferences and the user paths
if 'installing' not in locals():
    from psychopy.preferences import prefs
    import site

    # Configure the environment to use our custom site-packages location for
    # user-installed packages. In the future, this will be configured outside of
    # the running environment, but for now, we need to do it here.
    useDefaultSite = False
    if 'PSYCHOPYNOPACKAGES' in os.environ:
        # Custom environment variable for people using PsychoPy as a library,
        # who don't want to use the custom site-packages location. If set to 1,
        # this will disable the custom site-packages location. Packages will be
        # installed in the default, system dependent user's site-packages 
        # location.
        useDefaultSite = os.environ['PSYCHOPYNOPACKAGES'] == '1'

    # configure environment for custom site-packages location
    if not useDefaultSite:
        env = os.environ.copy()
        if 'PYTHONPATH' in env:  # append entries to existing PYTHONPATH
            _userSitePackages = str(prefs.paths['userPackages'])
            if _userSitePackages not in env['PYTHONPATH']:
                env['PYTHONPATH'] = os.pathsep.join([
                    env['PYTHONPATH'], _userSitePackages])
            _userPackages = str(prefs.paths['packages'])
            if _userPackages not in env['PYTHONPATH']:
                env['PYTHONPATH'] = os.pathsep.join([
                    env['PYTHONPATH'], _userPackages]) 
        else:
            env['PYTHONPATH'] = os.pathsep.join([
                str(prefs.paths['userPackages']), 
                str(prefs.paths['packages'])])

        # set user site packages
        env['PYTHONUSERBASE'] = prefs.paths['packages']
        env['PYTHONNOUSERSITE'] = '1'  # isolate user packages

        # update environment, pass this to sub-processes (e.g. pip)
        os.environ.update(env)

        # make sure site knows about our custom user site-packages
        site.USER_SITE = prefs.paths['userPackages']
        site.ENABLE_USER_SITE = True
        # site.main()

        # add paths from main plugins/packages (installed by plugins manager)
        site.addsitedir(prefs.paths['userPackages'])  # user site-packages
        site.addsitedir(prefs.paths['userInclude'])  # user include
        site.addsitedir(prefs.paths['packages'])  # base package dir

        _envPath = os.environ.get('PATH', None)
        if _envPath is not None:
            # add user include path to system PATH (for C extensions)
            if str(prefs.paths['userInclude']) not in _envPath:
                os.environ['PATH'] = os.pathsep.join([
                    os.environ['PATH'], str(prefs.paths['userInclude'])])
            # add scripts path for user packages to system PATH
            if str(prefs.paths['userScripts']) not in _envPath:
                os.environ['PATH'] = os.pathsep.join([
                    os.environ['PATH'], str(prefs.paths['userScripts'])])

        if sys.platform == 'darwin' and sys._framework:
            # add scripts path for user packages to system PATH
            fwBinPath = os.path.join(sys.prefix, 'bin')
            if fwBinPath not in os.environ['PATH']:
                os.environ['PATH'] = os.pathsep.join([
                    fwBinPath, os.environ['PATH']])
    
    # add paths from general preferences
    for _pathName in prefs.general['paths']:
        sys.path.append(_pathName)
    
    # Add paths from individual plugins/packages (installed by plugins manager),
    # this is to support legacy plugins that don't use the customized user 
    # site-packages location. This will be removed in the future.
    import pathlib as _pathlib
    for _pathName in _pathlib.Path(prefs.paths['packages']).glob("*"):
        if _pathName.is_dir():
            sys.path.append(str(_pathName))

    from psychopy.tools.versionchooser import useVersion, ensureMinimal


if sys.version_info.major < 3:
    raise ImportError("psychopy does not support Python2 installations. "
                      "The last version to support Python2.7 was PsychoPy "
                      "2021.2.x")

# import readline here to get around an issue with sounddevice
# issues GH-2230 GH-2344 GH-2662
try:
    import readline
except ImportError:
    pass  # all that will happen is the stderr/stdout might get redirected


"""


def _getGitShaString(dist=None, sha=None):
    """If generic==True then returns empty __git_sha__ string
    """
    shaStr = 'n/a'
    if dist is not None:
        proc = subprocess.Popen('git rev-parse --short HEAD',
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                encoding='utf-8',
                                cwd='.', shell=True)
        repo_commit, _ = proc.communicate()
        del proc  # to get rid of the background process
        if repo_commit:
            shaStr = "{}".format(repo_commit.strip())
        else:
            shaStr = 'n/a'
    return shaStr


def _getPlatformString(dist=None):
    """If generic==True then returns empty __build_platform__ string
    """
    if dist == 'bdist':
        # get platform-specific info
        if os.sys.platform == 'darwin':
            OSXver, _, architecture = platform.mac_ver()
            systemInfo = "OSX_%s_%s" % (OSXver, architecture)
        elif os.sys.platform == 'linux':
            import distro
            systemInfo = '%s_%s_%s' % (
                'Linux',
                ':'.join([x for x in distro.linux_distribution() if x != '']),
                platform.release())
        elif os.sys.platform == 'win32':
            ver = os.sys.getwindowsversion()
            if len(ver[4]) > 0:
                systemInfo = "win32_v%i.%i.%i (%s)" % (ver[0], ver[1], ver[2],
                                                       ver[4])
            else:
                systemInfo = "win32_v%i.%i.%i" % (ver[0], ver[1], ver[2])
        else:
            systemInfo = platform.system() + platform.release()
    else:
        systemInfo = "n/a"

    return systemInfo


if __name__ == "__main__":
    createInitFile()
